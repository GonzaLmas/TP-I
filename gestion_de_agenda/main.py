import funciones as f

def main():
    """
    Funci√≥n principal que ejecuta el sistema de contactos
    """
    # Lista para almacenar todos los contactos (simula base de datos)
    contacts = []
    
    # Variable de control para el bucle principal
    flag = True
    
    print("¬°Bienvenido al Sistema de Agenda!")
    
    # Bucle principal del programa
    while flag:
        try:
            # Mostrar men√∫ y obtener opci√≥n del usuario
            f.show_menu()
            option = input("\nSeleccione una opci√≥n (1-7): ").strip()
            
            if option == "1":
                # Agregar contacto
                print("\nüÜï AGREGAR CONTACTO")
                new_contact = f.create_contact()
                contacts.append(new_contact)
                print(f"‚úÖ Contacto '{new_contact['nombre']}' agregado exitosamente.")
                
                # Preguntar si quiere agregar otro
                while True:
                    another_contact = input("\n¬øDesea agregar otro contacto? (s/n): ").lower().strip()
                    if another_contact in ['s', 'si', 's√≠']:
                        new_contact = f.create_contact()
                        contacts.append(new_contact)
                        print(f"‚úÖ Contacto '{new_contact['nombre']}' agregado exitosamente.")
                    elif another_contact in ['n', 'no']:
                        break
                    else:
                        print("‚ùå Responda 's' para s√≠ o 'n' para no.")
            
            elif option == "2":
                # Mostrar todos los contactos
                print("\nüìã MOSTRAR TODOS LOS CONTACTOS")
                f.show_all_contacts(contacts)
                
                if contacts:
                    # Opci√≥n para ver detalle de un contacto
                    while True:
                        view_detail = input("\n¬øDesea ver el detalle de alg√∫n contacto? (n√∫mero/n): ").strip()
                        if view_detail.lower() in ['n', 'no']:
                            break
                        try:
                            index = int(view_detail) - 1
                            sorted_contacts = sorted(contacts, key=lambda x: x['nombre'].lower())
                            if 0 <= index < len(sorted_contacts):
                                f.show_contact(sorted_contacts[index], True)
                            else:
                                print("‚ùå N√∫mero de contacto inv√°lido.")
                        except ValueError:
                            print("‚ùå Ingrese un n√∫mero v√°lido o 'n' para salir.")
            
            elif option == "3":
                # Buscar contacto
                print("\nüîç BUSCAR CONTACTO")
                if not contacts:
                    print("‚ùå No hay contactos para buscar.")
                    continue
                
                field = input("Ingrese nombre, tel√©fono o email a buscar: ").strip()
                if not field:
                    print("‚ùå Debe ingresar un t√©rmino de b√∫squeda.")
                    continue
                
                results = f.find_contacts(contacts, field)
                
                if results:
                    print(f"\n‚úÖ Se encontraron {len(results)} resultado(s):")
                    for i, contact in enumerate(results, 1):
                        print(f"\n--- Resultado {i} ---")
                        f.show_contact(contact)
                else:
                    print(f"‚ùå No se encontraron contactos con '{field}'.")
            
            elif option == "4":
                # Editar contacto
                print("\n‚úèÔ∏è  EDITAR CONTACTO")
                if not contacts:
                    print("‚ùå No hay contactos para editar.")
                    continue
                
                # Mostrar lista de contactos
                f.show_all_contacts(contacts)
                
                # Buscar contacto a editar
                field = input("\nIngrese nombre del contacto a editar: ").strip()
                if not field:
                    print("‚ùå Debe ingresar un nombre.")
                    continue
                
                results = f.find_contacts(contacts, field)
                
                if not results:
                    print(f"‚ùå No se encontr√≥ el contacto '{field}'.")
                    continue
                
                if len(results) == 1:
                    # Solo un resultado, editar directamente
                    f.edit_contact(results[0])
                else:
                    # M√∫ltiples resultados, que elija
                    print(f"\nSe encontraron {len(results)} contactos:")
                    for i, contact in enumerate(results, 1):
                        print(f"{i}. {contact['nombre']}")
                    
                    try:
                        contact_index = int(input("Seleccione el n√∫mero del contacto a editar: ")) - 1
                        if 0 <= contact_index < len(results):
                            f.edit_contact(results[contact_index])
                        else:
                            print("‚ùå Selecci√≥n inv√°lida.")
                    except ValueError:
                        print("‚ùå Debe ingresar un n√∫mero v√°lido.")
            
            elif option == "5":
                # Eliminar contacto
                print("\nüóëÔ∏è  ELIMINAR CONTACTO")
                if not contacts:
                    print("‚ùå No hay contactos para eliminar.")
                    continue
                
                # Mostrar lista de contactos
                f.show_all_contacts(contacts)
                
                # Buscar contacto a eliminar
                field = input("\nIngrese nombre del contacto a eliminar: ").strip()
                if not field:
                    print("‚ùå Debe ingresar un nombre.")
                    continue
                
                results = f.find_contacts(contacts, field)
                
                if not results:
                    print(f"‚ùå No se encontr√≥ el contacto '{field}'.")
                    continue
                
                contact_to_remove = None
                
                if len(results) == 1:
                    contact_to_remove = results[0]
                else:
                    # M√∫ltiples resultados
                    print(f"\nSe encontraron {len(results)} contactos:")
                    for i, contact in enumerate(results, 1):
                        print(f"{i}. {contact['nombre']}")
                    
                    try:
                        contact_index = int(input("Seleccione el n√∫mero del contacto a eliminar: ")) - 1
                        if 0 <= contact_index < len(results):
                            contact_to_remove = results[contact_index]
                        else:
                            print("‚ùå Selecci√≥n inv√°lida.")
                            continue
                    except ValueError:
                        print("‚ùå Debe ingresar un n√∫mero v√°lido.")
                        continue
                
                # Confirmar eliminaci√≥n
                print(f"\n‚ö†Ô∏è  Est√° a punto de eliminar:")
                f.show_contact(contact_to_remove)
                
                confirmation = input("¬øEst√° seguro? (s/n): ").lower().strip()
                if confirmation in ['s', 'si', 's√≠']:
                    contacts.remove(contact_to_remove)
                    print(f"‚úÖ Contacto '{contact_to_remove['nombre']}' eliminado exitosamente.")
                else:
                    print("‚ùå Eliminaci√≥n cancelada.")
            
            elif option == "6":
                # Buscar por categor√≠a
                print("\nüè∑Ô∏è  BUSCAR POR CATEGOR√çA")
                if not contacts:
                    print("‚ùå No hay contactos para buscar.")
                    continue
                
                # Mostrar categor√≠as disponibles
                categories = set(c['categoria'] for c in contacts)
                print("Categor√≠as disponibles:")
                for i, cat in enumerate(sorted(categories), 1):
                    quantity = len([c for c in contacts if c['categoria'] == cat])
                    print(f"{i}. {cat.title()} ({quantity} contactos)")
                
                category = input("\nIngrese la categor√≠a a buscar: ").strip()
                if not category:
                    print("‚ùå Debe ingresar una categor√≠a.")
                    continue
                
                results = f.find_by_category(contacts, category)
                
                if results:
                    print(f"\n‚úÖ Contactos en categor√≠a '{category.title()}' ({len(results)}):")
                    for contact in results:
                        f.show_contact(contact)
                else:
                    print(f"‚ùå No hay contactos en la categor√≠a '{category}'.")
            
            elif option == "7":
                # Salir
                print("\nüëã Gracias por usar el Sistema de Agenda.")
                print("¬°Hasta luego!")
                flag = False
            
            else:
                print("‚ùå Opci√≥n inv√°lida. Seleccione un n√∫mero del 1 al 7.")
        
        except KeyboardInterrupt:
            # Manejo de Ctrl+C
            print("\n\n‚ö†Ô∏è  Interrupci√≥n detectada.")
            exit = input("¬øDesea salir del programa? (s/n): ").lower().strip()
            if exit in ['s', 'si', 's√≠']:
                print("üëã ¬°Hasta luego!")
                flag = False
        
        except Exception as e:
            # Manejo de errores inesperados
            print(f"\n‚ùå Error inesperado: {e}")
            print("El programa continuar√° funcionando...")
        
        # Pausa para leer los mensajes (excepto en salida)
        if flag:
            input("\nPresione Enter para continuar...")

# Verificar si este archivo se est√° ejecutando directamente
if __name__ == "__main__":
    main()